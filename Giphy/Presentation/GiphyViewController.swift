import UIKit

//–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω MVP (Model, View, Presenter)

// Model - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
// View - —ç—Ç–æ UIViewController –∏ –µ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å—ã.
// Presenter ‚Äî –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É View Controller.
// View –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–µ–Ω–∞ Mock-–æ–±—ä–µ–∫—Ç–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –≤ Presenter –Ω–µ—Ç layout-–∫–æ–¥–∞,
// –Ω–æ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ View –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º

// –≠–∫—Ä–∞–Ω –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≥–∏—Ñ–∫–∏
final class GiphyViewController: UIViewController {
    
    private let mainStackView = UIStackView()
    
    private let titleStackView = UIStackView()
    private let titleLabel = UILabel()
    private let counterLabel = UILabel()
    
    private let giphyImageView = UIImageView()
    
    private let paddingView = UIView()
    private let buttonStackView = UIStackView()
    private let yesButton = UIButton()
    private let noButton = UIButton()
    
    private let giphyActivityIndicatorView = UIActivityIndicatorView()
    
    private var alertPresenter: AlertPresenter?
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è Int -- –°—á–µ—Ç—á–∏–∫ –∑–∞–ª–∞–π–∫–∞–Ω—ã—Ö –∏–ª–∏ –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω—ã—Ö –≥–∏—Ñ–æ–∫
    private var showGifCounter = 0
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è Int -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –≥–∏—Ñ–æ–∫
    private var likedGifCounter = 0
    
    // –°–ª–æ–π Presenter - –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä—ã–º –¥–æ–ª–∂–µ–Ω –æ–±—â–∞—Ç—å—Å—è UIViewController
    private lazy var presenter: GiphyPresenterProtocol = {
        let presenter = GiphyPresenter()
        presenter.viewController = self
        return presenter
    }()
    
    // MARK: - –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —ç–∫—Ä–∞–Ω–∞
    override func viewDidLoad() {
        super.viewDidLoad()
        
        actionButton()
        applyStyle()
        applyLayout()
        restart()
        alertPresenter = AlertPresenter(alertPresent: self)
    }
}

// MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ UI
private extension GiphyViewController {
    func applyStyle() {
        view.backgroundColor = Theme.backgroundColor
        
        applyStyleLabel(
            titleLabel,
            text: "Text title label".localized()
        )
        applyStyleLabel(
            counterLabel,
            textAlignment: .right
        )
        
        giphyImageView.image = UIImage(named: "Giphy logo") ?? UIImage()
        giphyImageView.contentMode = .scaleAspectFit
        giphyImageView.layer.cornerRadius = Theme.imageCornerRadius
        
        applyStyleAnswerButton(yesButton, title: "üëç")
        applyStyleAnswerButton(noButton, title: "üëé")
        
        giphyActivityIndicatorView.style = .large
        giphyActivityIndicatorView.color = .ypWhite
    }
    
    func applyLayout() {
        arrangeStackView(
            mainStackView,
            subviews: [
                titleStackView,
                giphyImageView,
                paddingView
            ],
            spacing: Theme.spacing,
            axis: .vertical
        )
        
        arrangeStackView(
            titleStackView,
            subviews: [titleLabel, counterLabel]
        )
        counterLabel.setContentHuggingPriority(.defaultHigh, for: .horizontal)
        
        arrangeStackView(
            buttonStackView,
            subviews: [noButton, yesButton],
            spacing: Theme.spacing,
            distribution: .fillEqually
        )
        
        buttonStackView.translatesAutoresizingMaskIntoConstraints = false
        paddingView.addSubview(buttonStackView)
        buttonStackView.setContentCompressionResistancePriority(.required, for: .vertical)
        
        [mainStackView, giphyActivityIndicatorView].forEach { item in
            item.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(item)
        }
        
        NSLayoutConstraint.activate([
            mainStackView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: Theme.leftOffset),
            mainStackView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -Theme.leftOffset),
            mainStackView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: Theme.topOffset),
            mainStackView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            titleStackView.heightAnchor.constraint(equalToConstant: Theme.titleStackHeight),
            
            giphyImageView.widthAnchor.constraint(equalTo: giphyImageView.heightAnchor, multiplier: Theme.imageHeightAspect),
            
            giphyActivityIndicatorView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            giphyActivityIndicatorView.centerYAnchor.constraint(equalTo: giphyImageView.centerYAnchor),
            giphyActivityIndicatorView.heightAnchor.constraint(equalToConstant: Theme.spacing),
            giphyActivityIndicatorView.widthAnchor.constraint(equalToConstant: Theme.spacing),
            
            buttonStackView.leadingAnchor.constraint(equalTo: paddingView.leadingAnchor, constant: Theme.leftOffsetButtonStack),
            buttonStackView.trailingAnchor.constraint(equalTo: paddingView.trailingAnchor, constant: -Theme.leftOffsetButtonStack),
            buttonStackView.centerYAnchor.constraint(equalTo: paddingView.centerYAnchor),
            
            buttonStackView.heightAnchor.constraint(equalToConstant: Theme.buttonHeight)
        ])
    }
    
    func actionButton() {
        yesButton.addTarget(self, action: #selector(yesButtonTapped), for: .primaryActionTriggered)
        noButton.addTarget(self, action: #selector(noButtonTapped), for: .primaryActionTriggered)
    }
    
    // MARK: Supporting methods
    func arrangeStackView(
        _ stackView: UIStackView,
        subviews: [UIView],
        spacing: CGFloat = 0,
        axis: NSLayoutConstraint.Axis = .horizontal,
        distribution: UIStackView.Distribution = .fill,
        alignment: UIStackView.Alignment = .fill
    ) {
        stackView.axis = axis
        stackView.spacing = spacing
        stackView.distribution = distribution
        stackView.alignment = alignment
        
        subviews.forEach { item in
            item.translatesAutoresizingMaskIntoConstraints = false
            stackView.addArrangedSubview(item)
        }
    }
    
    func applyStyleLabel(
        _ label: UILabel,
        text: String = "",
        font: UIFont? = Theme.mediumLargeFont,
        textColor: UIColor = .ypWhite,
        textAlignment: NSTextAlignment = .left,
        numberOfLines: Int = 1
    ) {
        label.text = text
        label.font = font
        label.textColor = textColor
        label.textAlignment = textAlignment
        label.numberOfLines = numberOfLines
    }
    
    func applyStyleAnswerButton(_ button: UIButton, title: String) {
        button.setTitle(title, for: .normal)
        button.titleLabel?.font = Theme.mediumLargeFont
        button.setTitleColor(.ypBlack, for: .normal)
        button.backgroundColor = .ypWhite
        button.layer.cornerRadius = Theme.buttonCornerRadius
        button.layer.masksToBounds = true
        button.isEnabled = false
    }
    
    func setGiphyImageViewBorder(width: CGFloat = 0, color: CGColor = UIColor.ypWhite.cgColor) {
        giphyImageView.layer.borderWidth = width
        giphyImageView.layer.borderColor = color
    }
    
    func restart() {
        showGifCounter = 1
        likedGifCounter = 0
        setTextForCounterLabel()
        presenter.fetchNextGiphy()
    }
    
    func didAnswer(isYes: Bool) {
        if isYes {
            likedGifCounter += 1
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –≥–∏—Ñ–∫—É
            presenter.saveGif(giphyImageView.image)
        }
        checkLookedTenGifts()
        showImageBorder(isAnswer: isYes)
        setTextForCounterLabel()
    }
    
    func checkLookedTenGifts() {
        let maxAttempts = 9
        if showGifCounter > maxAttempts {
            showEndOfGiphy()
        } else {
            showGifCounter += 1
            presenter.fetchNextGiphy()
        }
    }
    
    func setTextForCounterLabel() {
        counterLabel.text = "\(likedGifCounter)/\(showGifCounter)"
    }
    
    func showImageBorder(isAnswer: Bool) {
        let color = isAnswer ? UIColor.ypGreen.cgColor : UIColor.ypRed.cgColor
        setGiphyImageViewBorder(width: Theme.imageAnswerBorderWidth, color: color)
        
        [noButton, yesButton].forEach { $0.isEnabled = false }
    }
}

// MARK: - GiphyViewControllerProtocol
extension GiphyViewController: GiphyViewControllerProtocol {
    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ UIAlertController, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–∏—Ñ–∫—É
    
    func showEndOfGiphy() {
        // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å UIAlertController
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ -- –ú–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!
        // –°–æ–æ–±—â–µ–Ω–∏–µ -- –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: \(n)\\10
        // –ö–Ω–æ–ø–∫–∞ -- –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ –≥–∏—Ñ–æ–∫
        //
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ -- –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ restart
        let messageLocalized = "Did you like it: %d/10".localized()
        
        let model = AlertModel(
            title: "Memes are over!".localized(),
            message: String.localizedStringWithFormat(messageLocalized, likedGifCounter),
            buttonText: "I want to see more gifs".localized()
        ) { [weak self] _ in
            guard let self = self else { return }
            self.restart()
            self.giphyImageView.image = UIImage(named: "Giphy logo") ?? UIImage()
        }
        presentAlert(model)
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–∏—Ñ–∫—É UIImage
    func showGiphy(_ image: UIImage?) {
        giphyImageView.image = image
        activatedButton()
    }
    
    // –í—ã–∑–≤–∞—Ç—å giphyActivityIndicatorView –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    func showLoader() {
        giphyActivityIndicatorView.startAnimating()
        giphyActivityIndicatorView.isHidden = false
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å giphyActivityIndicatorView –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    func hideHoaler() {
        giphyActivityIndicatorView.stopAnimating()
        setGiphyImageViewBorder()
    }
    
    func presentAlert(_ alert: AlertModel) {
        alertPresenter?.showAlert(with: alert)
    }
    
    func activatedButton() {
        [noButton, yesButton].forEach { $0.isEnabled = true }
    }
}

// MARK: - Actions
private extension GiphyViewController {
    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞
    @objc private func yesButtonTapped() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ—Ç 10 –≥–∏—Ñ–æ–∫
        // –ï—Å–ª–∏ –≤—Å–µ 10 –≥–∏—Ñ–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å UIAlertController –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ UIAlertController –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
        // –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 10 –≥–∏—Ñ–æ–∫, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UIlabel —Å —Å—á–µ—Ç—á–∏–∫–æ–º
        didAnswer(isYes: true)
    }
    
    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–∏–∑–ª–∞–π–∫–∞
    @objc private func noButtonTapped() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ—Ç 10 –≥–∏—Ñ–æ–∫
        // –ï—Å–ª–∏ –≤—Å–µ 10 –≥–∏—Ñ–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å UIAlertController –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ UIAlertController –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏ –Ω–∞—á–∞—Ç—å
        // –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 10 –≥–∏—Ñ–æ–∫, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UIlabel —Å —Å—á–µ—Ç—á–∏–∫–æ–º
        didAnswer(isYes: false)
    }
}
